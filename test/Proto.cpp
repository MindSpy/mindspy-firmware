// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mindspy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Proto.hpp"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mindspy {
namespace protobufs {

namespace {

const ::google::protobuf::Descriptor* Separator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Separator_reflection_ = NULL;
const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSamples_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSamples_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetModelName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetModelName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mindspy_2eproto() {
  protobuf_AddDesc_mindspy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mindspy.proto");
  GOOGLE_CHECK(file != NULL);
  Separator_descriptor_ = file->message_type(0);
  static const int Separator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Separator, last_),
  };
  Separator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Separator_descriptor_,
      Separator::default_instance_,
      Separator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Separator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Separator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Separator));
  State_descriptor_ = file->message_type(1);
  static const int State_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, payload_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
  Sample_descriptor_ = file->message_type(2);
  static const int Sample_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, payload_),
  };
  Sample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample_descriptor_,
      Sample::default_instance_,
      Sample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample));
  GetSamples_descriptor_ = file->message_type(3);
  static const int GetSamples_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSamples, count_),
  };
  GetSamples_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSamples_descriptor_,
      GetSamples::default_instance_,
      GetSamples_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSamples, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSamples, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSamples));
  GetState_descriptor_ = file->message_type(4);
  static const int GetState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetState, addresses_),
  };
  GetState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetState_descriptor_,
      GetState::default_instance_,
      GetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetState));
  SetState_descriptor_ = file->message_type(5);
  static const int SetState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetState, states_),
  };
  SetState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetState_descriptor_,
      SetState::default_instance_,
      SetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetState));
  GetModelName_descriptor_ = file->message_type(6);
  static const int GetModelName_offsets_[1] = {
  };
  GetModelName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetModelName_descriptor_,
      GetModelName::default_instance_,
      GetModelName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetModelName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetModelName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetModelName));
  Request_descriptor_ = file->message_type(7);
  static const int Request_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getsamples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, setstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getmodelname_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(8);
  static const int Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_msg_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mindspy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Separator_descriptor_, &Separator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample_descriptor_, &Sample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSamples_descriptor_, &GetSamples::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetState_descriptor_, &GetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetState_descriptor_, &SetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetModelName_descriptor_, &GetModelName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mindspy_2eproto() {
  delete Separator::default_instance_;
  delete Separator_reflection_;
  delete State::default_instance_;
  delete State_reflection_;
  delete Sample::default_instance_;
  delete Sample_reflection_;
  delete GetSamples::default_instance_;
  delete GetSamples_reflection_;
  delete GetState::default_instance_;
  delete GetState_reflection_;
  delete SetState::default_instance_;
  delete SetState_reflection_;
  delete GetModelName::default_instance_;
  delete GetModelName_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_mindspy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmindspy.proto\022\021mindspy.protobufs\"\031\n\tSe"
    "parator\022\014\n\004last\030\002 \002(\010\")\n\005State\022\017\n\007addres"
    "s\030\001 \002(\r\022\017\n\007payload\030\002 \002(\r\"/\n\006Sample\022\020\n\010se"
    "quence\030\001 \002(\004\022\023\n\007payload\030\002 \003(\005B\002\020\001\"\033\n\nGet"
    "Samples\022\r\n\005count\030\001 \002(\r\"!\n\010GetState\022\025\n\tad"
    "dresses\030\001 \003(\rB\002\020\001\"4\n\010SetState\022(\n\006states\030"
    "\001 \003(\0132\030.mindspy.protobufs.State\"\016\n\014GetMo"
    "delName\"\232\002\n\007Request\022\021\n\ttimestamp\030\001 \002(\004\022\r"
    "\n\005reqid\030\002 \002(\r\022\016\n\006module\030\003 \001(\r\022\025\n\006stream\030"
    "\004 \001(\010:\005false\0221\n\ngetSamples\030\005 \001(\0132\035.minds"
    "py.protobufs.GetSamples\022-\n\010getState\030\006 \001("
    "\0132\033.mindspy.protobufs.GetState\022-\n\010setSta"
    "te\030\007 \001(\0132\033.mindspy.protobufs.SetState\0225\n"
    "\014getModelName\030\010 \001(\0132\037.mindspy.protobufs."
    "GetModelName\"\270\001\n\010Response\022\021\n\ttimestamp\030\001"
    " \002(\004\022\r\n\005reqid\030\002 \002(\r\022\016\n\006module\030\003 \001(\r\022(\n\006s"
    "tates\030\004 \003(\0132\030.mindspy.protobufs.State\022*\n"
    "\007samples\030\005 \003(\0132\031.mindspy.protobufs.Sampl"
    "e\022\021\n\tmodelName\030\006 \001(\t\022\021\n\terror_msg\030\007 \001(\tB"
    "\036\n\025org.mindspy.protobufsB\005Proto", 791);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mindspy.proto", &protobuf_RegisterTypes);
  Separator::default_instance_ = new Separator();
  State::default_instance_ = new State();
  Sample::default_instance_ = new Sample();
  GetSamples::default_instance_ = new GetSamples();
  GetState::default_instance_ = new GetState();
  SetState::default_instance_ = new SetState();
  GetModelName::default_instance_ = new GetModelName();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Separator::default_instance_->InitAsDefaultInstance();
  State::default_instance_->InitAsDefaultInstance();
  Sample::default_instance_->InitAsDefaultInstance();
  GetSamples::default_instance_->InitAsDefaultInstance();
  GetState::default_instance_->InitAsDefaultInstance();
  SetState::default_instance_->InitAsDefaultInstance();
  GetModelName::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mindspy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mindspy_2eproto {
  StaticDescriptorInitializer_mindspy_2eproto() {
    protobuf_AddDesc_mindspy_2eproto();
  }
} static_descriptor_initializer_mindspy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Separator::kLastFieldNumber;
#endif  // !_MSC_VER

Separator::Separator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Separator::InitAsDefaultInstance() {
}

Separator::Separator(const Separator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Separator::SharedCtor() {
  _cached_size_ = 0;
  last_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Separator::~Separator() {
  SharedDtor();
}

void Separator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Separator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Separator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Separator_descriptor_;
}

const Separator& Separator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

Separator* Separator::default_instance_ = NULL;

Separator* Separator::New() const {
  return new Separator;
}

void Separator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Separator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool last = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Separator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool last = 2;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->last(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Separator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool last = 2;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->last(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Separator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool last = 2;
    if (has_last()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Separator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Separator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Separator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Separator::MergeFrom(const Separator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last()) {
      set_last(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Separator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Separator::CopyFrom(const Separator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Separator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Separator::Swap(Separator* other) {
  if (other != this) {
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Separator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Separator_descriptor_;
  metadata.reflection = Separator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int State::kAddressFieldNumber;
const int State::kPayloadFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  address_ = 0u;
  payload_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = 0u;
    payload_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_payload;
        break;
      }

      // required uint32 payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_)));
          set_has_payload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->address(), output);
  }

  // required uint32 payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->address(), target);
  }

  // required uint32 payload = 2;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->address());
    }

    // required uint32 payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sample::kSequenceFieldNumber;
const int Sample::kPayloadFieldNumber;
#endif  // !_MSC_VER

Sample::Sample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample::InitAsDefaultInstance() {
}

Sample::Sample(const Sample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
  sequence_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample::~Sample() {
  SharedDtor();
}

void Sample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample_descriptor_;
}

const Sample& Sample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

Sample* Sample::default_instance_ = NULL;

Sample* Sample::New() const {
  return new Sample;
}

void Sample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_ = GOOGLE_ULONGLONG(0);
  }
  payload_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // repeated int32 payload = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_payload())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_payload())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence(), output);
  }

  // repeated int32 payload = 2 [packed = true];
  if (this->payload_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_payload_cached_byte_size_);
  }
  for (int i = 0; i < this->payload_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->payload(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence(), target);
  }

  // repeated int32 payload = 2 [packed = true];
  if (this->payload_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _payload_cached_byte_size_, target);
  }
  for (int i = 0; i < this->payload_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->payload(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence());
    }

  }
  // repeated int32 payload = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->payload_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->payload(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _payload_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
  GOOGLE_CHECK_NE(&from, this);
  payload_.MergeFrom(from.payload_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Sample::Swap(Sample* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    payload_.Swap(&other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample_descriptor_;
  metadata.reflection = Sample_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSamples::kCountFieldNumber;
#endif  // !_MSC_VER

GetSamples::GetSamples()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSamples::InitAsDefaultInstance() {
}

GetSamples::GetSamples(const GetSamples& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSamples::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSamples::~GetSamples() {
  SharedDtor();
}

void GetSamples::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSamples::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSamples::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSamples_descriptor_;
}

const GetSamples& GetSamples::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

GetSamples* GetSamples::default_instance_ = NULL;

GetSamples* GetSamples::New() const {
  return new GetSamples;
}

void GetSamples::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSamples::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSamples::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSamples::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSamples::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSamples::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSamples* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSamples*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSamples::MergeFrom(const GetSamples& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSamples::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSamples::CopyFrom(const GetSamples& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSamples::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSamples::Swap(GetSamples* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSamples::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSamples_descriptor_;
  metadata.reflection = GetSamples_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetState::kAddressesFieldNumber;
#endif  // !_MSC_VER

GetState::GetState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetState::InitAsDefaultInstance() {
}

GetState::GetState(const GetState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetState::~GetState() {
  SharedDtor();
}

void GetState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetState_descriptor_;
}

const GetState& GetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

GetState* GetState::default_instance_ = NULL;

GetState* GetState::New() const {
  return new GetState;
}

void GetState::Clear() {
  addresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 addresses = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_addresses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_addresses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 addresses = 1 [packed = true];
  if (this->addresses_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_addresses_cached_byte_size_);
  }
  for (int i = 0; i < this->addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->addresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 addresses = 1 [packed = true];
  if (this->addresses_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _addresses_cached_byte_size_, target);
  }
  for (int i = 0; i < this->addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->addresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetState::ByteSize() const {
  int total_size = 0;

  // repeated uint32 addresses = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->addresses_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->addresses(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _addresses_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetState::MergeFrom(const GetState& from) {
  GOOGLE_CHECK_NE(&from, this);
  addresses_.MergeFrom(from.addresses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetState::CopyFrom(const GetState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetState::IsInitialized() const {

  return true;
}

void GetState::Swap(GetState* other) {
  if (other != this) {
    addresses_.Swap(&other->addresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetState_descriptor_;
  metadata.reflection = GetState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetState::kStatesFieldNumber;
#endif  // !_MSC_VER

SetState::SetState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetState::InitAsDefaultInstance() {
}

SetState::SetState(const SetState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetState::~SetState() {
  SharedDtor();
}

void SetState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetState_descriptor_;
}

const SetState& SetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

SetState* SetState::default_instance_ = NULL;

SetState* SetState::New() const {
  return new SetState;
}

void SetState::Clear() {
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mindspy.protobufs.State states = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mindspy.protobufs.State states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mindspy.protobufs.State states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetState::ByteSize() const {
  int total_size = 0;

  // repeated .mindspy.protobufs.State states = 1;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetState::MergeFrom(const SetState& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetState::CopyFrom(const SetState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetState::IsInitialized() const {

  for (int i = 0; i < states_size(); i++) {
    if (!this->states(i).IsInitialized()) return false;
  }
  return true;
}

void SetState::Swap(SetState* other) {
  if (other != this) {
    states_.Swap(&other->states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetState_descriptor_;
  metadata.reflection = SetState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetModelName::GetModelName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetModelName::InitAsDefaultInstance() {
}

GetModelName::GetModelName(const GetModelName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetModelName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetModelName::~GetModelName() {
  SharedDtor();
}

void GetModelName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetModelName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetModelName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetModelName_descriptor_;
}

const GetModelName& GetModelName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

GetModelName* GetModelName::default_instance_ = NULL;

GetModelName* GetModelName::New() const {
  return new GetModelName;
}

void GetModelName::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetModelName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetModelName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetModelName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetModelName::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetModelName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetModelName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetModelName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetModelName::MergeFrom(const GetModelName& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetModelName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelName::CopyFrom(const GetModelName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelName::IsInitialized() const {

  return true;
}

void GetModelName::Swap(GetModelName* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetModelName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetModelName_descriptor_;
  metadata.reflection = GetModelName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kTimestampFieldNumber;
const int Request::kReqidFieldNumber;
const int Request::kModuleFieldNumber;
const int Request::kStreamFieldNumber;
const int Request::kGetSamplesFieldNumber;
const int Request::kGetStateFieldNumber;
const int Request::kSetStateFieldNumber;
const int Request::kGetModelNameFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  getsamples_ = const_cast< ::mindspy::protobufs::GetSamples*>(&::mindspy::protobufs::GetSamples::default_instance());
  getstate_ = const_cast< ::mindspy::protobufs::GetState*>(&::mindspy::protobufs::GetState::default_instance());
  setstate_ = const_cast< ::mindspy::protobufs::SetState*>(&::mindspy::protobufs::SetState::default_instance());
  getmodelname_ = const_cast< ::mindspy::protobufs::GetModelName*>(&::mindspy::protobufs::GetModelName::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  reqid_ = 0u;
  module_ = 0u;
  stream_ = false;
  getsamples_ = NULL;
  getstate_ = NULL;
  setstate_ = NULL;
  getmodelname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete getsamples_;
    delete getstate_;
    delete setstate_;
    delete getmodelname_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    reqid_ = 0u;
    module_ = 0u;
    stream_ = false;
    if (has_getsamples()) {
      if (getsamples_ != NULL) getsamples_->::mindspy::protobufs::GetSamples::Clear();
    }
    if (has_getstate()) {
      if (getstate_ != NULL) getstate_->::mindspy::protobufs::GetState::Clear();
    }
    if (has_setstate()) {
      if (setstate_ != NULL) setstate_->::mindspy::protobufs::SetState::Clear();
    }
    if (has_getmodelname()) {
      if (getmodelname_ != NULL) getmodelname_->::mindspy::protobufs::GetModelName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module;
        break;
      }

      // optional uint32 module = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_)));
          set_has_module();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stream;
        break;
      }

      // optional bool stream = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_getSamples;
        break;
      }

      // optional .mindspy.protobufs.GetSamples getSamples = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getSamples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsamples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_getState;
        break;
      }

      // optional .mindspy.protobufs.GetState getState = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_setState;
        break;
      }

      // optional .mindspy.protobufs.SetState setState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_getModelName;
        break;
      }

      // optional .mindspy.protobufs.GetModelName getModelName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmodelname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // optional uint32 module = 3;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module(), output);
  }

  // optional bool stream = 4 [default = false];
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stream(), output);
  }

  // optional .mindspy.protobufs.GetSamples getSamples = 5;
  if (has_getsamples()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->getsamples(), output);
  }

  // optional .mindspy.protobufs.GetState getState = 6;
  if (has_getstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->getstate(), output);
  }

  // optional .mindspy.protobufs.SetState setState = 7;
  if (has_setstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->setstate(), output);
  }

  // optional .mindspy.protobufs.GetModelName getModelName = 8;
  if (has_getmodelname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->getmodelname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // optional uint32 module = 3;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module(), target);
  }

  // optional bool stream = 4 [default = false];
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stream(), target);
  }

  // optional .mindspy.protobufs.GetSamples getSamples = 5;
  if (has_getsamples()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->getsamples(), target);
  }

  // optional .mindspy.protobufs.GetState getState = 6;
  if (has_getstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->getstate(), target);
  }

  // optional .mindspy.protobufs.SetState setState = 7;
  if (has_setstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->setstate(), target);
  }

  // optional .mindspy.protobufs.GetModelName getModelName = 8;
  if (has_getmodelname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->getmodelname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required uint32 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

    // optional uint32 module = 3;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module());
    }

    // optional bool stream = 4 [default = false];
    if (has_stream()) {
      total_size += 1 + 1;
    }

    // optional .mindspy.protobufs.GetSamples getSamples = 5;
    if (has_getsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsamples());
    }

    // optional .mindspy.protobufs.GetState getState = 6;
    if (has_getstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getstate());
    }

    // optional .mindspy.protobufs.SetState setState = 7;
    if (has_setstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setstate());
    }

    // optional .mindspy.protobufs.GetModelName getModelName = 8;
    if (has_getmodelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getmodelname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_getsamples()) {
      mutable_getsamples()->::mindspy::protobufs::GetSamples::MergeFrom(from.getsamples());
    }
    if (from.has_getstate()) {
      mutable_getstate()->::mindspy::protobufs::GetState::MergeFrom(from.getstate());
    }
    if (from.has_setstate()) {
      mutable_setstate()->::mindspy::protobufs::SetState::MergeFrom(from.setstate());
    }
    if (from.has_getmodelname()) {
      mutable_getmodelname()->::mindspy::protobufs::GetModelName::MergeFrom(from.getmodelname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_getsamples()) {
    if (!this->getsamples().IsInitialized()) return false;
  }
  if (has_setstate()) {
    if (!this->setstate().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(reqid_, other->reqid_);
    std::swap(module_, other->module_);
    std::swap(stream_, other->stream_);
    std::swap(getsamples_, other->getsamples_);
    std::swap(getstate_, other->getstate_);
    std::swap(setstate_, other->setstate_);
    std::swap(getmodelname_, other->getmodelname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kTimestampFieldNumber;
const int Response::kReqidFieldNumber;
const int Response::kModuleFieldNumber;
const int Response::kStatesFieldNumber;
const int Response::kSamplesFieldNumber;
const int Response::kModelNameFieldNumber;
const int Response::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  reqid_ = 0u;
  module_ = 0u;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::kEmptyString) {
    delete modelname_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mindspy_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    reqid_ = 0u;
    module_ = 0u;
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::kEmptyString) {
        modelname_->clear();
      }
    }
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
  }
  states_.Clear();
  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint32 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module;
        break;
      }

      // optional uint32 module = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_)));
          set_has_module();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_states;
        break;
      }

      // repeated .mindspy.protobufs.State states = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_states;
        if (input->ExpectTag(42)) goto parse_samples;
        break;
      }

      // repeated .mindspy.protobufs.Sample samples = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_samples;
        if (input->ExpectTag(50)) goto parse_modelName;
        break;
      }

      // optional string modelName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reqid(), output);
  }

  // optional uint32 module = 3;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module(), output);
  }

  // repeated .mindspy.protobufs.State states = 4;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->states(i), output);
  }

  // repeated .mindspy.protobufs.Sample samples = 5;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->samples(i), output);
  }

  // optional string modelName = 6;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->modelname(), output);
  }

  // optional string error_msg = 7;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->error_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required uint32 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reqid(), target);
  }

  // optional uint32 module = 3;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module(), target);
  }

  // repeated .mindspy.protobufs.State states = 4;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->states(i), target);
  }

  // repeated .mindspy.protobufs.Sample samples = 5;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->samples(i), target);
  }

  // optional string modelName = 6;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->modelname(), target);
  }

  // optional string error_msg = 7;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->error_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required uint32 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

    // optional uint32 module = 3;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module());
    }

    // optional string modelName = 6;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

    // optional string error_msg = 7;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

  }
  // repeated .mindspy.protobufs.State states = 4;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  // repeated .mindspy.protobufs.Sample samples = 5;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < states_size(); i++) {
    if (!this->states(i).IsInitialized()) return false;
  }
  for (int i = 0; i < samples_size(); i++) {
    if (!this->samples(i).IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(reqid_, other->reqid_);
    std::swap(module_, other->module_);
    states_.Swap(&other->states_);
    samples_.Swap(&other->samples_);
    std::swap(modelname_, other->modelname_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobufs
}  // namespace mindspy

// @@protoc_insertion_point(global_scope)
