// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regs.proto

#ifndef PROTOBUF_regs_2eproto__INCLUDED
#define PROTOBUF_regs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_regs_2eproto();
void protobuf_AssignDesc_regs_2eproto();
void protobuf_ShutdownFile_regs_2eproto();

class Separator;
class Request;
class State;
class Sample;
class Response;

enum Request_Action {
  Request_Action_ECHO = 0,
  Request_Action_GET_STATE = 2,
  Request_Action_SET_STATE = 3,
  Request_Action_SAMPLES = 1,
  Request_Action_TEST = 4,
  Request_Action_LED = 5,
  Request_Action_STIMULATE = 6
};
bool Request_Action_IsValid(int value);
const Request_Action Request_Action_Action_MIN = Request_Action_ECHO;
const Request_Action Request_Action_Action_MAX = Request_Action_STIMULATE;
const int Request_Action_Action_ARRAYSIZE = Request_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Action_descriptor();
inline const ::std::string& Request_Action_Name(Request_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Action_descriptor(), value);
}
inline bool Request_Action_Parse(
    const ::std::string& name, Request_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Action>(
    Request_Action_descriptor(), name, value);
}
enum Response_ErrNo {
  Response_ErrNo_NO_ERROR = 0,
  Response_ErrNo_HANDLER_MISSING = 1,
  Response_ErrNo_HANDLER_FAILED = 2
};
bool Response_ErrNo_IsValid(int value);
const Response_ErrNo Response_ErrNo_ErrNo_MIN = Response_ErrNo_NO_ERROR;
const Response_ErrNo Response_ErrNo_ErrNo_MAX = Response_ErrNo_HANDLER_FAILED;
const int Response_ErrNo_ErrNo_ARRAYSIZE = Response_ErrNo_ErrNo_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ErrNo_descriptor();
inline const ::std::string& Response_ErrNo_Name(Response_ErrNo value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ErrNo_descriptor(), value);
}
inline bool Response_ErrNo_Parse(
    const ::std::string& name, Response_ErrNo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ErrNo>(
    Response_ErrNo_descriptor(), name, value);
}
// ===================================================================

class Separator : public ::google::protobuf::Message {
 public:
  Separator();
  virtual ~Separator();

  Separator(const Separator& from);

  inline Separator& operator=(const Separator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Separator& default_instance();

  void Swap(Separator* other);

  // implements Message ----------------------------------------------

  Separator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Separator& from);
  void MergeFrom(const Separator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool last = 1;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 1;
  inline bool last() const;
  inline void set_last(bool value);

  // @@protoc_insertion_point(class_scope:Separator)
 private:
  inline void set_has_last();
  inline void clear_has_last();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool last_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_regs_2eproto();
  friend void protobuf_AssignDesc_regs_2eproto();
  friend void protobuf_ShutdownFile_regs_2eproto();

  void InitAsDefaultInstance();
  static Separator* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Action Action;
  static const Action ECHO = Request_Action_ECHO;
  static const Action GET_STATE = Request_Action_GET_STATE;
  static const Action SET_STATE = Request_Action_SET_STATE;
  static const Action SAMPLES = Request_Action_SAMPLES;
  static const Action TEST = Request_Action_TEST;
  static const Action LED = Request_Action_LED;
  static const Action STIMULATE = Request_Action_STIMULATE;
  static inline bool Action_IsValid(int value) {
    return Request_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Request_Action_Action_MIN;
  static const Action Action_MAX =
    Request_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Request_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Request_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Request_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Request_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Request.Action action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::Request_Action action() const;
  inline void set_action(::Request_Action value);

  // required uint64 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional bool stream = 6 [default = false];
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 6;
  inline bool stream() const;
  inline void set_stream(bool value);

  // optional uint32 start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional bytes payload = 5;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 5;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:Request)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_stream();
  inline void clear_has_stream();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 timestamp_;
  int action_;
  bool stream_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 count_;
  ::std::string* payload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_regs_2eproto();
  friend void protobuf_AssignDesc_regs_2eproto();
  friend void protobuf_ShutdownFile_regs_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class State : public ::google::protobuf::Message {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  void Swap(State* other);

  // implements Message ----------------------------------------------

  State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline ::google::protobuf::uint32 address() const;
  inline void set_address(::google::protobuf::uint32 value);

  // required uint32 payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline ::google::protobuf::uint32 payload() const;
  inline void set_payload(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:State)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 address_;
  ::google::protobuf::uint32 payload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_regs_2eproto();
  friend void protobuf_AssignDesc_regs_2eproto();
  friend void protobuf_ShutdownFile_regs_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class Sample : public ::google::protobuf::Message {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sample& default_instance();

  void Swap(Sample* other);

  // implements Message ----------------------------------------------

  Sample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline ::google::protobuf::uint64 sequence() const;
  inline void set_sequence(::google::protobuf::uint64 value);

  // repeated int32 payload = 2;
  inline int payload_size() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline ::google::protobuf::int32 payload(int index) const;
  inline void set_payload(int index, ::google::protobuf::int32 value);
  inline void add_payload(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      payload() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_payload();

  // @@protoc_insertion_point(class_scope:Sample)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 sequence_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > payload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_regs_2eproto();
  friend void protobuf_AssignDesc_regs_2eproto();
  friend void protobuf_ShutdownFile_regs_2eproto();

  void InitAsDefaultInstance();
  static Sample* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_ErrNo ErrNo;
  static const ErrNo NO_ERROR = Response_ErrNo_NO_ERROR;
  static const ErrNo HANDLER_MISSING = Response_ErrNo_HANDLER_MISSING;
  static const ErrNo HANDLER_FAILED = Response_ErrNo_HANDLER_FAILED;
  static inline bool ErrNo_IsValid(int value) {
    return Response_ErrNo_IsValid(value);
  }
  static const ErrNo ErrNo_MIN =
    Response_ErrNo_ErrNo_MIN;
  static const ErrNo ErrNo_MAX =
    Response_ErrNo_ErrNo_MAX;
  static const int ErrNo_ARRAYSIZE =
    Response_ErrNo_ErrNo_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrNo_descriptor() {
    return Response_ErrNo_descriptor();
  }
  static inline const ::std::string& ErrNo_Name(ErrNo value) {
    return Response_ErrNo_Name(value);
  }
  static inline bool ErrNo_Parse(const ::std::string& name,
      ErrNo* value) {
    return Response_ErrNo_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Response.ErrNo error = 1 [default = NO_ERROR];
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::Response_ErrNo error() const;
  inline void set_error(::Response_ErrNo value);

  // optional string error_msg = 2;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  inline void set_allocated_error_msg(::std::string* error_msg);

  // required uint64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // repeated .State state = 4;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline const ::State& state(int index) const;
  inline ::State* mutable_state(int index);
  inline ::State* add_state();
  inline const ::google::protobuf::RepeatedPtrField< ::State >&
      state() const;
  inline ::google::protobuf::RepeatedPtrField< ::State >*
      mutable_state();

  // repeated .Sample sample = 5;
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 5;
  inline const ::Sample& sample(int index) const;
  inline ::Sample* mutable_sample(int index);
  inline ::Sample* add_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::Sample >&
      sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sample >*
      mutable_sample();

  // @@protoc_insertion_point(class_scope:Response)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_msg_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::RepeatedPtrField< ::State > state_;
  ::google::protobuf::RepeatedPtrField< ::Sample > sample_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_regs_2eproto();
  friend void protobuf_AssignDesc_regs_2eproto();
  friend void protobuf_ShutdownFile_regs_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Separator

// required bool last = 1;
inline bool Separator::has_last() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Separator::set_has_last() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Separator::clear_has_last() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Separator::clear_last() {
  last_ = false;
  clear_has_last();
}
inline bool Separator::last() const {
  return last_;
}
inline void Separator::set_last(bool value) {
  set_has_last();
  last_ = value;
}

// -------------------------------------------------------------------

// Request

// required .Request.Action action = 1;
inline bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::Request_Action Request::action() const {
  return static_cast< ::Request_Action >(action_);
}
inline void Request::set_action(::Request_Action value) {
  assert(::Request_Action_IsValid(value));
  set_has_action();
  action_ = value;
}

// required uint64 timestamp = 2;
inline bool Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Request::timestamp() const {
  return timestamp_;
}
inline void Request::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bool stream = 6 [default = false];
inline bool Request::has_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_stream() {
  stream_ = false;
  clear_has_stream();
}
inline bool Request::stream() const {
  return stream_;
}
inline void Request::set_stream(bool value) {
  set_has_stream();
  stream_ = value;
}

// optional uint32 start = 3;
inline bool Request::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 Request::start() const {
  return start_;
}
inline void Request::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
}

// optional uint32 count = 4;
inline bool Request::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Request::count() const {
  return count_;
}
inline void Request::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional bytes payload = 5;
inline bool Request::has_payload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_payload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_payload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Request::payload() const {
  return *payload_;
}
inline void Request::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Request::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Request::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Request::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// State

// required uint32 address = 1;
inline bool State::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void State::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void State::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void State::clear_address() {
  address_ = 0u;
  clear_has_address();
}
inline ::google::protobuf::uint32 State::address() const {
  return address_;
}
inline void State::set_address(::google::protobuf::uint32 value) {
  set_has_address();
  address_ = value;
}

// required uint32 payload = 2;
inline bool State::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void State::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void State::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void State::clear_payload() {
  payload_ = 0u;
  clear_has_payload();
}
inline ::google::protobuf::uint32 State::payload() const {
  return payload_;
}
inline void State::set_payload(::google::protobuf::uint32 value) {
  set_has_payload();
  payload_ = value;
}

// -------------------------------------------------------------------

// Sample

// required uint64 sequence = 1;
inline bool Sample::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sample::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sample::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sample::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
  clear_has_sequence();
}
inline ::google::protobuf::uint64 Sample::sequence() const {
  return sequence_;
}
inline void Sample::set_sequence(::google::protobuf::uint64 value) {
  set_has_sequence();
  sequence_ = value;
}

// repeated int32 payload = 2;
inline int Sample::payload_size() const {
  return payload_.size();
}
inline void Sample::clear_payload() {
  payload_.Clear();
}
inline ::google::protobuf::int32 Sample::payload(int index) const {
  return payload_.Get(index);
}
inline void Sample::set_payload(int index, ::google::protobuf::int32 value) {
  payload_.Set(index, value);
}
inline void Sample::add_payload(::google::protobuf::int32 value) {
  payload_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Sample::payload() const {
  return payload_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Sample::mutable_payload() {
  return &payload_;
}

// -------------------------------------------------------------------

// Response

// optional .Response.ErrNo error = 1 [default = NO_ERROR];
inline bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::Response_ErrNo Response::error() const {
  return static_cast< ::Response_ErrNo >(error_);
}
inline void Response::set_error(::Response_ErrNo value) {
  assert(::Response_ErrNo_IsValid(value));
  set_has_error();
  error_ = value;
}

// optional string error_msg = 2;
inline bool Response::has_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& Response::error_msg() const {
  return *error_msg_;
}
inline void Response::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void Response::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void Response::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  return error_msg_;
}
inline ::std::string* Response::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (error_msg) {
    set_has_error_msg();
    error_msg_ = error_msg;
  } else {
    clear_has_error_msg();
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 timestamp = 3;
inline bool Response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Response::timestamp() const {
  return timestamp_;
}
inline void Response::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// repeated .State state = 4;
inline int Response::state_size() const {
  return state_.size();
}
inline void Response::clear_state() {
  state_.Clear();
}
inline const ::State& Response::state(int index) const {
  return state_.Get(index);
}
inline ::State* Response::mutable_state(int index) {
  return state_.Mutable(index);
}
inline ::State* Response::add_state() {
  return state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::State >&
Response::state() const {
  return state_;
}
inline ::google::protobuf::RepeatedPtrField< ::State >*
Response::mutable_state() {
  return &state_;
}

// repeated .Sample sample = 5;
inline int Response::sample_size() const {
  return sample_.size();
}
inline void Response::clear_sample() {
  sample_.Clear();
}
inline const ::Sample& Response::sample(int index) const {
  return sample_.Get(index);
}
inline ::Sample* Response::mutable_sample(int index) {
  return sample_.Mutable(index);
}
inline ::Sample* Response::add_sample() {
  return sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sample >&
Response::sample() const {
  return sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sample >*
Response::mutable_sample() {
  return &sample_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Request_Action>() {
  return ::Request_Action_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Response_ErrNo>() {
  return ::Response_ErrNo_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_regs_2eproto__INCLUDED
